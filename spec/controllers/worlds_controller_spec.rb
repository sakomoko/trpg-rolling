require 'spec_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator.  If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails.  There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.
#
# Compared to earlier versions of this generator, there is very limited use of
# stubs and message expectations in this spec.  Stubs are only used when there
# is no simpler way to get a handle on the object needed for the example.
# Message expectations are only used when there is no simpler way to specify
# that an instance is receiving a specific message.

describe WorldsController do

  let(:user) { FactoryGirl.create :user }
  let(:world) { FactoryGirl.create :world, :owner => user }
  let(:valid_attributes) { FactoryGirl.build(:world, :owner => nil).attributes.symbolize_keys }

  describe "GET index" do
    it "assigns all worlds as @worlds" do
      get :index
      assigns(:worlds).should eq([world])
    end
  end

  describe "GET show" do
    it "assigns the requested world as @world" do
      get :show, {:id => world.to_param}
      assigns(:world).should eq(world)
    end
  end

  describe "GET new" do
    context "When user logged in" do
      before do
        sign_in user
      end
      it "assigns a new world as @world" do
        get :new
        assigns(:world).should be_a_new(World)
      end
    end
  end

  describe "GET edit" do
    context "When user logged in" do
      before do
        sign_in user
      end
      it "assigns the requested world as @world" do
        get :edit, {:id => world.to_param}
        assigns(:world).should eq(world)
      end
    end
  end

  describe "POST create" do

    context "When user logged in" do
      before do
        sign_in user
      end

      context "with valid params" do
        it "creates a new World" do
          expect {
            post :create, {:world => valid_attributes}
          }.to change(World, :count).by(1)
        end

        it "assigns a newly created world as @world" do
          post :create, {:world => valid_attributes}
          assigns(:world).should be_a(World)
          assigns(:world).should be_persisted
        end

        it "redirects to the created world" do
          post :create, {:world => valid_attributes}
          response.should redirect_to(World.last)
        end
      end

      context "with invalid params" do
        it "assigns a newly created but unsaved world as @world" do
          # Trigger the behavior that occurs when invalid params are submitted
          World.any_instance.stub(:save).and_return(false)
          post :create, {:world => {}}
          assigns(:world).should be_a_new(World)
        end

        it "re-renders the 'new' template" do
          # Trigger the behavior that occurs when invalid params are submitted
          World.any_instance.stub(:save).and_return(false)
          post :create, {:world => {}}
          response.status.should eq 302
        end
      end
    end
  end

  describe "PUT update" do

    before do
      sign_in user
    end

    describe "with valid params" do
      it "updates the requested world" do
        # Assuming there are no other worlds in the database, this
        # specifies that the World created on the previous line
        # receives the :update_attributes message with whatever params are
        # submitted in the request.
        World.any_instance.should_receive(:update_attributes).with({'these' => 'params'})
        put :update, {:id => world.to_param, :world => {'these' => 'params'}}
      end

      it "assigns the requested world as @world" do
        put :update, {:id => world.to_param, :world => world.attributes }
        assigns(:world).should eq(world)
      end

      it "redirects to the world" do
        put :update, {:id => world.to_param, :world => world.attributes}
        response.should redirect_to(world)
      end
    end

    describe "with invalid params" do
      it "assigns the world as @world" do
        # Trigger the behavior that occurs when invalid params are submitted
        world
        World.any_instance.stub(:save).and_return(false)
        put :update, {:id => world.to_param, :world => {}}
        assigns(:world).should eq(world)
      end

      it "re-renders the 'edit' template" do
        # Trigger the behavior that occurs when invalid params are submitted
        world
        World.any_instance.stub(:save).and_return(false)
        put :update, {:id => world.to_param, :world => {}}
        response.status.should eq 302
      end
    end
  end

  describe "DELETE destroy" do
    before do
      sign_in user
    end
    it "destroys the requested world" do
      delete :destroy, {:id => world.to_param}
      assigns(:world).should be_destroyed
    end

    it "redirects to the worlds list" do
      delete :destroy, {:id => world.to_param}
      response.should redirect_to(worlds_url)
    end
  end

end
